// Generated by CoffeeScript 1.6.3
var VerifyView;

VerifyView = Backbone.Marionette.ItemView.extend({
  template: JST["_attachments/templates/VerifyView.handlebars"](),
  className: "itemView",
  events: {
    "click #identifyIndividual": "identifyIndividual",
    "click #identifyAdmin": "identifyAdmin",
    "click #scan": "scanNewIndividual",
    "click #verifyYes": "displayNewUserRegistration",
    "click #verifyNo": "displayNewUserRegistration",
    "click #refresh": "refresh"
  },
  nextUrl: null,
  hasCordova: true,
  initialize: function() {
    if (typeof cordova === "undefined") {
      return this.hasCordova = false;
    }
  },
  displayNewUserRegistration: function() {
    Coconut.router.navigate("userRegistration", true);
  },
  diplayNewReportMenu: function() {},
  scanNewIndividual: function(e) {
    this.scan(e, "Enroll");
  },
  register: function(e) {
    this.scan(e, "Enroll");
  },
  identifyIndividual: function(e) {
    this.scan(e, "Identify", "Individual");
  },
  identifyAdmin: function(e) {
    this.scan(e, "Identify", "Admin");
  },
  scan: function(event, method, user) {
    var display, revealSlider,
      _this = this;
    this.eventUrl = this.nextUrl;
    display = function(message) {
      var label, lineBreak;
      console.log("display message: " + message);
      display = document.getElementById("message");
      lineBreak = document.createElement("br");
      label = document.createTextNode(message);
      display.appendChild(lineBreak);
      display.appendChild(label);
    };
    revealSlider = function(event, method, user) {
      var button, maxRepeat, progress, repeat, startLadda;
      startLadda = function(e) {
        var i, interval, l;
        l = Ladda.create(e.currentTarget);
        l.start();
        if (_this.hasCordova) {
          console.log("method: " + method);
          if (method === "Identify") {
            cordova.plugins.SecugenPlugin.identify(function(results) {
              var error, message, scannerPayload, serviceMessage, serviceResponse, serviceUuid, statusCode, users, viewOptions;
              message = results;
              try {
                serviceResponse = JSON.parse(results);
                scannerPayload = serviceResponse.scannerPayload;
                serviceMessage = serviceResponse.serviceMessage;
                statusCode = serviceMessage.StatusCode;
                serviceUuid = serviceMessage.UID;
                console.log('query for serviceUuid: ' + serviceUuid);
              } catch (_error) {
                error = _error;
                console.log(error);
              }
              if (statusCode !== null && statusCode === 1) {
                viewOptions = {};
                users = new SecondaryIndexCollection;
                return users.fetch({
                  fetch: 'query',
                  options: {
                    query: {
                      key: serviceUuid,
                      include_docs: true,
                      fun: 'by_serviceUuid'
                    }
                  },
                  success: function() {
                    var adminUser, uuid;
                    console.log('by_serviceUuid returned: ' + JSON.stringify(users));
                    l.stop();
                    Coconut.siteNav.empty();
                    Controller.displaySiteNav();
                    if (users.length > 0) {
                      if (user === "Admin") {
                        adminUser = users.first();
                        console.log('Coconut.currentAdmin: ' + JSON.stringify(adminUser));
                        Coconut.currentAdmin = adminUser;
                        return Coconut.router.navigate("displayUserScanner", true);
                      } else {
                        user = users.first();
                        console.log('Coconut.currentAdmin: ' + JSON.stringify(user));
                        Coconut.currentClient = user;
                        return Coconut.router.navigate("displayClientRecords", true);
                      }
                    } else {
                      console.log('Strange. This user was identified but is not registered.');
                      uuid = coconutUtils.uuidGenerator(30);
                      Coconut.currentClient = new Result({
                        _id: uuid,
                        serviceUuid: serviceUuid,
                        Template: scannerPayload.Template
                      });
                      console.log("currentClient: " + JSON.stringify(Coconut.currentClient));
                      Coconut.scannerPayload = scannerPayload;
                      if (user === "Admin") {
                        return Coconut.trigger("displayAdminRegistrationForm");
                      } else {
                        return Coconut.trigger("displayUserRegistrationForm");
                      }
                    }
                  }
                });
              } else {
                l.stop();
                $("#message").html("No match - you must register.");
                Coconut.scannerPayload = scannerPayload;
                if (_this.nextUrl != null) {
                  return Coconut.router.navigate(_this.nextUrl, true);
                } else {
                  return Coconut.router.navigate("registration", true);
                }
              }
            }, function(error) {
              var message;
              console.log("Error: " + error);
              message = error;
              if (error === "Scan failed: Unable to capture fingerprint. Please kill the app in the Task Manager and restart the app.") {
                message = '<p>' + polyglot.t("scanFailed") + '<br/><a data-role="button" id="refresh" class="btn btn-primary btn-lg" data-style="expand-right">Refresh</a></p>';
                $("#message").html(message);
              }
              console.log("SecugenPlugin.identify: " + message);
              return l.stop();
            });
          } else {
            cordova.plugins.SecugenPlugin.register(function(results) {
              var obj, serviceUuid, statusCode, uuid;
              console.log("SecugenPlugin.register: " + results);
              $("#message").html(results);
              l.stop();
              obj = JSON.parse(results);
              statusCode = obj.StatusCode;
              serviceUuid = obj.UID;
              if (statusCode === 1) {
                uuid = coconutUtils.uuidGenerator(30);
                Coconut.currentClient = new Result({
                  _id: uuid,
                  serviceUuid: serviceUuid
                });
                console.log("currentClient: " + JSON.stringify(Coconut.currentClient));
                $("#message").html("No match - you must register.");
                if (_this.nextUrl != null) {
                  return Coconut.router.navigate(_this.nextUrl, true);
                } else {
                  return Coconut.router.navigate("registration", true);
                }
              } else {
                return Coconut.router.navigate("displayAdminScanner", true);
              }
            });
          }
        } else {
          i = 1;
          interval = setInterval(function() {
            var serviceUuid, uuid;
            if (i === 50) {
              uuid = coconutUtils.uuidGenerator(30);
              serviceUuid = coconutUtils.uuidGenerator(30);
              console.log("Go to next page. Generated UUID: " + uuid);
              Coconut.scannerPayload = {
                "Template": "46 4D 52 00 20 32 30 00 00 00 00 F0 00 00 01 04 01 2C 00 C5 00 C5 01 00 00 00 00 23 40 83 00 40 71 00 40 52 00 53 75 00 80 33 00 6B 8A 00 80 A9 00 6C 72 00 40 5B 00 81 7D 00 80 93 00 87 71 00 40 28 00 99 91 00 40 17 00 A1 11 00 40 44 00 A9 8D 00 40 81 00 B8 78 00 40 1B 00 BA 10 00 40 73 00 C2 80 00 40 3F 00 C3 94 00 40 DF 00 C7 E8 00 80 4B 00 CE 11 00 40 32 00 D6 91 00 40 16 00 D8 14 00 80 3D 00 E0 10 00 40 1A 00 E2 11 00 40 A3 00 E3 EE 00 40 38 00 F3 94 00 40 9E 00 F5 73 00 40 6D 00 FB 00 00 40 56 00 FC 93 00 40 A8 00 FC E3 00 40 26 00 FC 11 00 40 40 00 FD 10 00 40 7C 01 01 F8 00 80 C9 01 03 EA 00 40 38 01 04 9A 00 80 6D 01 07 7F 00 40 9E 01 0E 6C 00 40 32 01 10 17 00 40 88 01 11 EE 00 80 88 01 23 72 00 00 00 ",
                "Name": "Test CK",
                "Finger": 1,
                "Key": "HH8XGFYSDU9QGZ833"
              };
              Coconut.currentClient = new Result({
                _id: uuid,
                serviceUuid: serviceUuid
              });
              $("#message").html("Scanning complete!");
              l.stop();
              if (_this.nextUrl != null) {
                Coconut.router.navigate(_this.nextUrl, true);
              } else {
                Coconut.router.navigate("registration", true);
              }
              clearInterval(interval);
            }
            return i++;
          }, 50);
        }
        return false;
      };
      console.log("revealSlider");
      progress = document.querySelector("paper-progress");
      button = document.querySelector("paper-button");
      startLadda(event);
      repeat = void 0;
      return maxRepeat = 5;
    };
    return revealSlider(event, method, user);
  },
  display: function(message) {
    var display, label, lineBreak;
    console.log("display message.");
    display = document.getElementById("message");
    lineBreak = document.createElement("br");
    label = document.createTextNode(message);
    display.appendChild(lineBreak);
    display.appendChild(label);
  },
  refresh: function() {
    Coconut.router.navigate("", false);
    return location.reload();
  }
});
