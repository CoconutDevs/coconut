// Generated by CoffeeScript 1.6.3
var VerifyView;

VerifyView = Backbone.Marionette.ItemView.extend({
  template: JST["_attachments/templates/VerifyView.handlebars"](),
  className: "itemView",
  events: {
    "click #verify": "scan",
    "click #scan": "scanNewIndividual",
    "click #verifyYes": "displayNewUserRegistration",
    "click #verifyNo": "displayNewUserRegistration"
  },
  initialize: function() {},
  displayNewUserRegistration: function() {
    Coconut.router.navigate("userRegistration", true);
  },
  diplayNewReportMenu: function() {},
  scanNewIndividual: function() {
    this.scan("userRegistration");
  },
  scan: function(next, sliderId) {
    var display, revealSlider;
    console.log("Register clicked ");
    display = function(message) {
      var label, lineBreak;
      console.log("display message: " + message);
      display = document.getElementById("message");
      lineBreak = document.createElement("br");
      label = document.createTextNode(message);
      display.appendChild(lineBreak);
      display.appendChild(label);
    };
    revealSlider = function(next, sliderId) {
      var button, maxRepeat, nextProgress, progress, repeat, startProgress, thisSliderId;
      nextProgress = function() {
        if (progress.value < progress.max) {
          progress.value += progress.step || 1;
          requestAnimationFrame(nextProgress);
        } else {
          window.setTimeout((function() {
            if (typeof next === "string") {
              Coconut.router.navigate(next, true);
            } else {
              Coconut.router.navigate("registration", true);
            }
          }), 500);
        }
      };
      startProgress = function() {
        var repeat;
        repeat = 0;
        progress.value = progress.min;
        nextProgress();
      };
      console.log("revealSlider");
      progress = document.querySelector("paper-progress");
      button = document.querySelector("paper-button");
      if (typeof sliderId !== "undefined") {
        thisSliderId = sliderId;
      }
      startProgress();
      repeat = void 0;
      maxRepeat = 5;
      addEventListener("polymer-ready", function() {
        startProgress();
      });
    };
    if (!typeof cordova === "undefined") {
      cordova.plugins.SecugenPlugin.register((function(results) {
        $("#message").html(results);
      }), function(e) {
        console.log("Error: " + e);
        $("#message").html("Error:" + results);
      });
    } else {
      console.log("Cordova is not initialised. Plugins will not work.");
      revealSlider(next, sliderId);
    }
  },
  display: function(message) {
    var display, label, lineBreak;
    console.log("display message.");
    display = document.getElementById("message");
    lineBreak = document.createElement("br");
    label = document.createTextNode(message);
    display.appendChild(lineBreak);
    display.appendChild(label);
  }
});
